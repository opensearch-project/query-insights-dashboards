name: Cypress e2e integration tests workflow

on:
  pull_request:
    branches: ["*"]
  push:
    branches: ["*"]

concurrency:
  group: cypress-e2e-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  OPENSEARCH_BRANCH: '3.2'
  OPENSEARCH_DASHBOARDS_VERSION: '3.2.0'
  OPENSEARCH_VERSION: '3.2.0-SNAPSHOT'
  QUERY_INSIGHTS_BRANCH: '3.2'
  GRADLE_VERSION: '7.6.1'
  CYPRESS_VIDEO: true
  CYPRESS_SCREENSHOT_ON_RUN_FAILURE: true

jobs:
  tests:
    name: Run Cypress E2E tests
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            cypress_cache_folder: ~/.cache/Cypress
    runs-on: ${{ matrix.os }}
    env:
      CI: 1
      TERM: xterm

    steps:
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin

      - name: Checkout Query Insights
        uses: actions/checkout@v4
        with:
          path: query-insights
          repository: opensearch-project/query-insights
          ref: ${{ env.QUERY_INSIGHTS_BRANCH }}

      - name: Checkout OpenSearch
        uses: actions/checkout@v4
        with:
          path: OpenSearch
          repository: opensearch-project/OpenSearch
          ref: ${{ env.OPENSEARCH_BRANCH }}

      - name: Build Required Plugins
        run: |
          set -euo pipefail
          cd OpenSearch
          ./gradlew :modules:autotagging-commons:assemble
          ./gradlew :plugins:workload-management:assemble

          echo "Checking autotagging-commons build directory:"
          ls -la modules/autotagging-commons/build/distributions/ || true
          echo "Checking WLM build directory:"
          ls -la plugins/workload-management/build/distributions/ || true

      - name: Copy Plugins to Query Insights
        run: |
          set -euo pipefail
          mkdir -p query-insights/plugins
          find OpenSearch/modules/autotagging-commons/build/distributions/ -name "*.zip" -exec cp {} query-insights/plugins/ \;
          find OpenSearch/plugins/workload-management/build/distributions/ -name "*.zip" -exec cp {} query-insights/plugins/ \;
          echo "Contents of plugins directory:"
          ls -la query-insights/plugins/

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}

      - name: Run OpenSearch with Query Insights plugin
        run: |
          set -euo pipefail
          cd query-insights
          ./gradlew run -Dopensearch.version=${{ env.OPENSEARCH_VERSION }} > ../opensearch.log 2>&1 &
          echo "Waiting for OpenSearch to start..."
          for i in {1..60}; do
            if curl -fsS http://localhost:9200/_cluster/health > /dev/null; then
              echo "OpenSearch is ready!"
              break
            fi
            echo "Attempt $i/60: OpenSearch not ready yet, waiting 10 seconds..."
            sleep 10
          done
          curl -fsS http://localhost:9200/_cluster/health || (echo "OpenSearch failed to start" && exit 1)

          echo -e "\nInstalled Plugins:"
          curl -fsS http://localhost:9200/_cat/plugins || true

          echo -e "\nEnabling WLM mode:"
          curl -fsS -X PUT "http://localhost:9200/_cluster/settings" \
            -H 'Content-Type: application/json' \
            -d '{"persistent":{"wlm.workload_group.mode":"enabled"}}' | jq '.' || true

          echo -e "\nTesting WLM stats endpoint:"
          curl -fsS http://localhost:9200/_wlm/workload_group | jq '.' || true

          echo -e "\nVerifying WLM mode:"
          MODE=$(curl -fsS http://localhost:9200/_cluster/settings | jq -r '.persistent.wlm.workload_group.mode // empty')
          if [ "${MODE:-disabled}" != "enabled" ]; then
            echo "WLM mode is not enabled (found: ${MODE:-unset})"
            exit 1
          fi
          echo "WLM mode is enabled."
        shell: bash

      - name: Checkout OpenSearch-Dashboards
        uses: actions/checkout@v4
        with:
          repository: opensearch-project/OpenSearch-Dashboards
          path: OpenSearch-Dashboards
          ref: ${{ env.OPENSEARCH_DASHBOARDS_VERSION }}

      - name: Checkout Query Insights Dashboards plugin
        uses: actions/checkout@v4
        with:
          path: OpenSearch-Dashboards/plugins/query-insights-dashboards

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: './OpenSearch-Dashboards/.nvmrc'
          registry-url: 'https://registry.npmjs.org'
          cache: 'yarn'
          cache-dependency-path: |
            OpenSearch-Dashboards/yarn.lock
            OpenSearch-Dashboards/plugins/query-insights-dashboards/yarn.lock

      - name: Install Yarn (exact engine version)
        shell: bash
        run: |
          set -euo pipefail
          YARN_VERSION=$(node -p "require('./OpenSearch-Dashboards/package.json').engines.yarn")
          echo "Installing yarn@${YARN_VERSION}"
          npm i -g yarn@"${YARN_VERSION}"
      - run: node -v
      - run: yarn -v

      - name: Bootstrap plugin/OpenSearch-Dashboards
        run: |
          set -euo pipefail
          cd OpenSearch-Dashboards/plugins/query-insights-dashboards
          yarn osd bootstrap --single-version=loose

      - name: Run OpenSearch-Dashboards server
        run: |
          set -euo pipefail
          cd OpenSearch-Dashboards
          # Give optimizer more headroom and reduce parallelism to avoid OOM on CI
          export NODE_OPTIONS="--max-old-space-size=8192 --dns-result-order=ipv4first"
          export OSD_OPTIMIZER_MAX_WORKERS=2
          echo "Starting Dashboards..."
          nohup yarn start --no-base-path --no-watch --server.host="0.0.0.0" > ../dashboards.log 2>&1 &
          echo $! > ../dashboards.pid
          sleep 5
          echo "Initial Dashboards log output:"
          head -n 200 ../dashboards.log || true
        shell: bash

      - name: Wait for OpenSearch-Dashboards to be ready (stream logs + detect crash)
        run: |
          set -euo pipefail
          cd OpenSearch-Dashboards
          PID=$(cat ../dashboards.pid || echo "")
          if [ -z "${PID}" ]; then
            echo "No Dashboards PID found; server failed to start."
            tail -n 500 ../dashboards.log || true
            exit 1
          fi

          echo "Tailing dashboards.log in background…"
          ( timeout 45m tail -n +1 -f ../dashboards.log || true ) &

          echo "Waiting for OpenSearch-Dashboards to start..."
          max_attempts=360  # up to 60 min (360 * 10s). Fresh runners can take a while.
          for attempt in $(seq 1 ${max_attempts}); do
            # If the process died, fail immediately with log tail
            if ! kill -0 "$PID" 2>/dev/null; then
              echo "Dashboards process exited unexpectedly. Last 500 log lines:"
              tail -n 500 ../dashboards.log || true
              exit 1
            fi

            if curl -fsS http://localhost:5601/api/status >/dev/null; then
              echo "OpenSearch-Dashboards is ready!"
              curl -fsS http://localhost:5601/api/status | jq '.' || true
              # small buffer so plugin routes finish registering
              sleep 30
              exit 0
            fi

            # Heartbeat every 10 attempts with recent logs + memory
            if [ $((attempt % 10)) -eq 0 ]; then
              echo "--- attempt $attempt/${max_attempts} ---"
              tail -n 80 ../dashboards.log || true
              echo "Node process memory:"
              ps -o pid,pmem,rss,comm -p "$PID" || true
            fi
            sleep 10
          done

          echo "Timed out waiting for Dashboards; last 500 log lines:"
          tail -n 500 ../dashboards.log || true
          exit 1
        shell: bash


      - name: Verify services are running
        run: |
          set -euo pipefail
          echo "Checking OpenSearch status..."
          curl -fsS http://localhost:9200/_cluster/health | jq '.' || echo "OpenSearch not responding"

          echo "=== Full OpenSearch-Dashboards Status ==="
          curl -fsS http://localhost:5601/api/status || echo "OpenSearch-Dashboards not responding"
          echo "========================================"

          echo "Checking OpenSearch-Dashboards overall state..."
          curl -fsS http://localhost:5601/api/status | jq '.status.overall.state' || echo "Could not extract overall state"

          echo "Checking plugin endpoint (unauthenticated dev route)…"
          curl -fsS http://localhost:5601/app/query-insights-dashboards || echo "Plugin endpoint not accessible"
        shell: bash
        continue-on-error: true

      - name: Install Cypress
        run: |
          set -euo pipefail
          cd OpenSearch-Dashboards/plugins/query-insights-dashboards
          npx cypress install
        shell: bash

      - name: Get Cypress version
        id: cypress_version
        run: |
          set -euo pipefail
          cd OpenSearch-Dashboards/plugins/query-insights-dashboards
          version=$(jq -r '.dependencies.cypress // .devDependencies.cypress // empty' package.json)
          echo "Resolved Cypress version: $version"
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Cache Cypress
        id: cache-cypress
        uses: actions/cache@v4
        with:
          path: ${{ matrix.cypress_cache_folder }}
          key: cypress-cache-v3-${{ matrix.os }}-${{ steps.cypress_version.outputs.version }}-${{ hashFiles('OpenSearch-Dashboards/plugins/query-insights-dashboards/package.json') }}

      - name: Cypress tests (Chrome)
        uses: cypress-io/github-action@v5
        with:
          working-directory: OpenSearch-Dashboards/plugins/query-insights-dashboards
          command: yarn run cypress run --config defaultCommandTimeout=120000,requestTimeout=120000,responseTimeout=120000,pageLoadTimeout=180000,taskTimeout=120000,execTimeout=120000
          wait-on: 'http://localhost:5601'
          wait-on-timeout: 1200
          browser: chrome
        env:
          CYPRESS_CACHE_FOLDER: ${{ matrix.cypress_cache_folder }}
          CI: true
        timeout-minutes: 60

      - name: Upload failure artifacts (screenshots, videos, logs)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failure-artifacts-${{ matrix.os }}
          path: |
            OpenSearch-Dashboards/plugins/query-insights-dashboards/cypress/screenshots
            OpenSearch-Dashboards/plugins/query-insights-dashboards/cypress/videos
            dashboards.log
            opensearch.log

      - name: Upload test videos (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos-${{ matrix.os }}
          path: OpenSearch-Dashboards/plugins/query-insights-dashboards/cypress/videos
